plugins {
    id "com.android.application"
    id "kotlin-android"
    // The Flutter Gradle Plugin must be applied after the Android and Kotlin Gradle plugins.
    id "dev.flutter.flutter-gradle-plugin"
}

android {
    namespace = "com.example.socialapp"
    compileSdk = flutter.compileSdkVersion
    ndkVersion = flutter.ndkVersion

    compileOptions {
        sourceCompatibility = JavaVersion.VERSION_1_8
        targetCompatibility = JavaVersion.VERSION_1_8
    }

    kotlinOptions {
        jvmTarget = JavaVersion.VERSION_1_8
    }

    defaultConfig {
        // TODO: Specify your own unique Application ID (https://developer.android.com/studio/build/application-id.html).
        applicationId = "com.example.socialapp"
        // You can update the following values to match your application needs.
        // For more information, see: https://flutter.dev/to/review-gradle-config.
        minSdk = flutter.minSdkVersion
        targetSdk = flutter.targetSdkVersion
        versionCode = flutter.versionCode
        versionName = flutter.versionName

        // Add useLibrary for org.apache.http.legacy
        useLibrary 'org.apache.http.legacy'
    }

    buildTypes {
        release {
            // TODO: Add your own signing config for the release build.
            // Signing with the debug keys for now, so `flutter run --release` works.
            signingConfig = signingConfigs.debug
            minifyEnabled true
            proguardFiles getDefaultProguardFile('proguard-android-optimize.txt'),
                          file('proguard-rules.pro'),
                          file('missing_classes.pro')
        }
    }

    // Add packagingOptions to resolve duplicate file conflicts
    packagingOptions {
        resources {
            excludes += ['META-INF/DEPENDENCIES', 'META-INF/LICENSE', 'META-INF/LICENSE.txt', 'META-INF/license.txt', 'META-INF/NOTICE', 'META-INF/NOTICE.txt', 'META-INF/notice.txt', 'META-INF/ASL2.0', 'META-INF/*.kotlin_module']
        }
    }

    // Add lint options to handle the conflicting classes
    lintOptions {
        disable 'DuplicatePlatformClasses'
        abortOnError false
    }
}

dependencies {
    // Use alternative HTTP client implementation
    implementation('com.google.http-client:google-http-client:1.41.0') {
        exclude group: 'org.apache.httpcomponents'
    }

    // Use Google API Client without problematic HTTP components
    implementation('com.google.api-client:google-api-client:1.33.0') {
        exclude group: 'org.apache.httpcomponents'
        exclude group: 'commons-logging'
    }

    // Use OkHttp as a modern alternative to httpclient
    implementation 'com.squareup.okhttp3:okhttp:4.10.0'

    // Add Joda Time
    implementation 'joda-time:joda-time:2.10.10'
    // Add Error Prone Annotations
    implementation 'com.google.errorprone:error_prone_annotations:2.10.0'
    // Add JSR 305 annotations (for javax.annotation)
    implementation 'com.google.code.findbugs:jsr305:3.0.2'
}

flutter {
    source = "../.."
}
